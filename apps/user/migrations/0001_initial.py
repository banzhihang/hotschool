# Generated by Django 2.2.12 on 2020-11-01 15:25

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('question', '0001_initial'),
        ('food', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('we_chat_openid', models.CharField(db_index=True, default='', max_length=100, verbose_name='微信openid')),
                ('phone', models.CharField(default='', max_length=12, verbose_name='手机号码')),
                ('nick_name', models.CharField(default='', max_length=50, verbose_name='昵称')),
                ('head_portrait', models.URLField(default='', max_length=300, verbose_name='图片url')),
                ('address', models.CharField(default='', max_length=50, verbose_name='所在地')),
                ('desc', models.CharField(default='', max_length=50, verbose_name='自我描述')),
                ('add_time', models.DateField(auto_now_add=True, verbose_name='添加时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Interest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=20, verbose_name='兴趣名称')),
                ('desc', models.CharField(default='', max_length=50, verbose_name='描述')),
            ],
            options={
                'verbose_name': '兴趣信息',
                'verbose_name_plural': '兴趣信息',
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, default='', max_length=20, verbose_name='学校名')),
                ('is_campus', models.IntegerField(choices=[(0, '不是校区'), (1, '是校区')], default=0, verbose_name='是否是一个校区')),
                ('desc', models.CharField(default='', max_length=100, verbose_name='描述')),
            ],
            options={
                'verbose_name': '学校信息',
                'verbose_name_plural': '学校信息',
            },
        ),
        migrations.CreateModel(
            name='UserData',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
                ('approval_number', models.IntegerField(default=0, verbose_name='获赞总数')),
                ('like_number', models.IntegerField(default=0, verbose_name='被喜欢总数')),
                ('collect_number', models.IntegerField(default=0, verbose_name='被收藏总数')),
                ('read_number', models.IntegerField(default=0, verbose_name='被阅读总数')),
                ('comment_number', models.IntegerField(default=0, verbose_name='被评论数')),
                ('answer_number', models.IntegerField(default=0, verbose_name='回答总数')),
            ],
            options={
                'verbose_name': '用户创作者数据',
                'verbose_name_plural': '用户创作者数据',
            },
        ),
        migrations.CreateModel(
            name='UserDynamic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(0, '赞同回答'), (1, '收藏回答'), (2, '回答问题'), (3, '关注问题'), (4, '提出问题')], db_index=True, verbose_name='操作类型')),
                ('add_time', models.FloatField(db_index=True, verbose_name='动态的创作时间的时间戳')),
                ('answer', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='question.Answer')),
                ('question', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='question.Question')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='所属用户')),
            ],
            options={
                'verbose_name': '用户动态',
                'verbose_name_plural': '用户动态',
            },
        ),
        migrations.CreateModel(
            name='UserCollectQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_time', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='添加时间')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='question.Question', verbose_name='所属问题')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='所属用户')),
            ],
            options={
                'verbose_name': '用户收藏的问题',
                'verbose_name_plural': '用户收藏的问题',
            },
        ),
        migrations.CreateModel(
            name='UserCollectFood',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_time', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='添加时间')),
                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='food.Food', verbose_name='所属美食')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='所属用户')),
            ],
            options={
                'verbose_name': '用户收藏的美食',
                'verbose_name_plural': '用户收藏的美食',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='school',
            field=models.ForeignKey(default=-1, on_delete=django.db.models.deletion.CASCADE, to='user.School', verbose_name='学校'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
